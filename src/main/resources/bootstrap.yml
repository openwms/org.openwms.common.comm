spring:
  application:
    name: tcpip-driver
  output:
    ansi:
      enabled: always

owms:
  eureka:
    url: http://${owms.eureka.user.name}:${owms.eureka.user.password}@localhost:8761
    user:
      name: user
      password: sa
    zone: ${owms.eureka.url}/eureka/
  srv:
    hostname: localhost
    protocol: http
  tracing:
    url: http://localhost:4317
  config:
    username: user
    password: sa
  driver:
    timezone: "Europe/Berlin"
    serialization: json
    osip:
      enabled: true
      sync-field: "###"
      date-pattern: yyyyMMddHHmmss
      telegram-ending: "\r\n"
    routing-service:
      name: routing-service # is default
      protocol: http # default: http
      username: user # default: user
      password: sa # default: sa
    connections:
      hostname: localhost
      port-rest: 30008
      so-timeout: 300000
      so-receive-buffer-size: 160
      so-send-buffer-size: 160
      identified-by-field: "RECV"

server:
  tomcat:
    max-threads: 5
  port: ${owms.driver.connections.port-rest}

eureka:
  client:
    instance-info-replication-interval-seconds: 10 # default is 30
    registryFetchIntervalSeconds: 5 # SBA
    service-url:
      defaultZone: ${owms.eureka.zone} # Must be camelCase
  instance:
    hostname: ${owms.srv.hostname}
    # Request a lease with a validity of 5 seconds. If until then the
    # lease has not been renewed, it expires and the Eureka server can evict it.
    # Default: 90s
    lease-expiration-duration-in-seconds: 5

    # The cadence of lease renewal, i.e. how often a heartbeat is sent to Eureka server.
    # In this case every 2 seconds. Use this only for development / debugging. In production use the ...
    # Default: 30s
    lease-renewal-interval-in-seconds: 2
    metadata-map:
      group: COMMON
      config-protocol: http # The protocol used to access the config server
      username: ${spring.security.user.name}
      password: ${spring.security.user.password}
      protocol: ${owms.srv.protocol}
      startup: ${random.int} # SBA
      zone: ${owms.eureka.zone}
      prometheus.scrape: "true"
      prometheus.path: "/actuator/prometheus"
      prometheus.port: ${server.port}
    non-secure-port-enabled: true
    prefer-ip-address: true
    secure-port-enabled: false

info:
  scm-url: "@scm.url@"
  build-url: "@ciManagement.url@"

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    rabbit:
      enabled: false
  info:
    git:
      mode: simple
  metrics:
    distribution:
      percentiles-histogram:
        greeting: true
        http:
          server:
            requests: true
    tags:
      application: ${spring.application.name}
  otlp:
    tracing:
      endpoint: ${owms.tracing.url}
  prometheus:
    metrics:
      export:
        enabled: true
  tracing:
    sampling:
      probability: 1.0

---
spring:
  config:
    activate:
      on-profile: ASYNCHRONOUS

owms:
  driver:
    dead-letter:
      exchange-name: dle.driver
      queue-name: driver-dl-queue
    osip:
      err:
        exchange-name: osip
        queue-name: osip-err-queue
        routing-key-in: osip.err.mfc
        routing-key-out: osip.err.ss
      locu:
        exchange-name: osip
        routing-key-out: osip.locu.ss
      req:
        exchange-name: osip
        routing-key-out: osip.req.ss
      res:
        exchange-name: osip
        queue-name: osip-res-queue
        routing-key-in: osip.res.*
      sysu:
        exchange-name: osip
        routing-key-out: osip.sysu.ss
      upd:
        exchange-name: osip
        routing-key-out: osip.upd.ss

management:
  health:
    rabbit:
      enabled: true

---
spring:
  config:
    activate:
      on-profile: SYNCHRONOUS
  rabbitmq:
    listener:
      direct:
        auto-startup: false

management:
  health:
    rabbit:
      enabled: false

owms:
  driver:
    osip:
      enabled: true
    server:
      port-rest: 30008
server:
  port: ${owms.driver.connections.port-rest}

---
spring:
  config:
    activate:
      on-profile: TEST
    import: classpath:application.yml
  cloud:
    bootstrap:
      enabled: false
    config:
      discovery:
        enabled: false
      enabled: false
      fail-fast: false # true means retry
      retry:
        max-attempts: 120
    discovery:
      enabled: false

owms:
  driver:
    routing-service:
      name: routing-service # is default
      protocol: http # default: http
      username: user # default: user
      password: sa # default: sa
    connections:
      hostname: 127.0.0.1
      port-rest: 30008
      so-timeout: 200000
      so-receive-buffer-size: 140
      so-send-buffer-size: 140
      identified-by-field: "TEST"
      subsystems:
        - name: SPS01
          inbound:
            mode: server
            hostname: 0.0.0.0
            port: 30001
            so-receive-buffer-size: 200
          outbound:
            mode: client
            hostname: 0.0.0.0
            port: 30002
            so-send-buffer-size: 200
            identified-by-field: "RECV"
            identified-by-value: "SPS01"
        - name: SPS02
          inbound:
            mode: server
            port: 30012
          outbound:
            mode: server
            port: 30011
            identified-by-value: "SPS02"
        - name: SPS03
          duplex:
            mode: server
            hostname: localhost
            port: 30003
            so-timeout: 60000
            so-send-buffer-size: 200
            so-receive-buffer-size: 200
            identified-by-field: "RECV"
            identified-by-value: "SPS03"
        - name: SPS04
          duplex:
            mode: server
            port: 30004
            identified-by-value: "SPS04"
        - name: SPS05
          duplex:
            mode: client
            port: 30005
            identified-by-value: "SPS05"
